import { Component, OnInit } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { AuthService } from './../../../service/auth.service';
import { MessageService } from 'primeng/api';
import { storageKey } from 'src/app/app-constant';
import { environment } from 'src/environments/environment';
import { Client } from '@stomp/stompjs';

interface CartItem {
  id: number;
  name: string;
  quantity: number;
  price: number;
  foodId: string;
  totalPrice: number;
  userInfo: any;
}

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.scss'],
  providers: [MessageService]
})
export class CartComponent {
  header: any;
  cartItems: CartItem[] = [];
  cartId: any;
  totalAmount: number = 0;
  userInfo: any = null;
  stompClient: Client;

  constructor(private http: HttpClient, private authService: AuthService, private messageService: MessageService) {
    this.stompClient = new Client({
      brokerURL: environment.backendApiUrl + '/ws?token=' + this.authService.getToken(),
      debug: (msg: string) => console.log(msg), // Debug log
      reconnectDelay: 5000, // T·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i sau 5s n·∫øu m·∫•t k·∫øt n·ªëi
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000
    });

    this.stompClient.onConnect = (frame) => {
      console.log('Connected: ' + frame);

      const handleNotification = (message: any) => {
        let content;
        try {
          content = JSON.parse(message.body); // Gi·∫£i m√£ JSON n·∫øu c√≥
        } catch (error) {
          content = message.body; // N·∫øu kh√¥ng ph·∫£i JSON, l·∫•y gi√° tr·ªã tr·ª±c ti·∫øp
        }

        console.log("‚úÖ N·ªôi dung th√¥ng b√°o:", content);
        console.log(message);
        switch (content) {
          case 'preparingOrder':
            this.messageService.add({
              severity: 'success',
              summary: 'ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng, ƒë∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã'
            });
            break;

          case 'doneOrder':
            this.messageService.add({
              severity: 'success',
              summary: 'ƒê∆°n h√†ng ƒë√£ ho√†n th√†nh'
            });
            break;

          case 'cancelOrder':
            this.messageService.add({
              severity: 'warn',
              summary: 'ƒê∆°n h√†ng ƒë√£ h·ªßy'
            });
            break;
            case 'rejectOrder':
              this.messageService.add({
                severity: 'warn',
                summary: 'ƒê∆°n h√†ng b·ªã h·ªßy do b·∫°n kh√¥ng ƒë·∫øn nh·∫≠n h√†ng'
              });
              break;    

          default:
            // this.messageService.add({
            //   severity: 'error',
            //   summary: 'ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i ' + message
            // });
            console.log(message);
            break;
        }

        // Reload l·∫°i trang sau khi nh·∫≠n th√¥ng b√°o
        // setTimeout(() => location.reload(), 1000);
        this.loadCart()
      };

      // ƒêƒÉng k√Ω l·∫Øng nghe th√¥ng b√°o c√° nh√¢n
      this.stompClient.subscribe('/user/queue/notifications', handleNotification);

      // ƒêƒÉng k√Ω l·∫Øng nghe th√¥ng b√°o chung
      this.stompClient.subscribe('/topic/public', handleNotification);
    };


    this.stompClient.onDisconnect = () => {
      console.log('Disconnected!');
    };
    this.connect();
  }

  ngOnInit() {
    this.header = new HttpHeaders().set(
      storageKey.AUTHORIZATION,
      this.authService.getToken()
    );
    this.getUserInfo();
    this.loadCart();
  }
  ngOnDestroy() {
   this.disconnect();
  }

  connect() {
    this.stompClient.activate(); // Thay v√¨ connect()
  }

  // Ng·∫Øt k·∫øt n·ªëi
  disconnect() {
    this.stompClient.deactivate();
  }
  // L·∫•y gi·ªè h√†ng t·ª´ API
  loadCart() {
    // console.log("From cart " + this.authService.getCartid());
    // console.log(this.header);
    this.cartId = this.authService.getCartid();

    this.http.get<any>(environment.backendApiUrl + '/api/v1/project/cartItem/info?cartId=' + this.cartId, {
      headers: this.header
    })
      .subscribe(
        (response) => {
          if (response.resultCode === 0) {
            if (response.data && response.data.length > 0) {
              // N·∫øu c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng, hi·ªÉn th·ªã danh s√°ch
              this.cartItems = response.data.map((item: any) => ({
                id: item.id,
                name: item.foodName,
                quantity: item.quantity,
                price: item.foodPrice,
                foodId: item.foodId
              }));
              this.calculateTotalAmount();
              // console.log(this.cartItems);
            } else {
              // N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m, hi·ªÉn th·ªã th√¥ng b√°o "Gi·ªè h√†ng tr·ªëng"
              this.cartItems = [];
              this.calculateTotalAmount();
              this.messageService.add({ severity: 'info', summary: 'Th√¥ng b√°o', detail: 'Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng' });
            }
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi t·∫£i gi·ªè h√†ng:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng' });
        }
      );
  }

  getUserInfo() {
    this.userInfo = {
      fullname: this.authService.getFullname(),  // L·∫•y h·ªç t√™n
      email: this.authService.getEmail(),        // L·∫•y email
      phonenumber: this.authService.getPhonenumber() // L·∫•y s·ªë ƒëi·ªán tho·∫°i
    };
  }

  // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
  increaseQuantity(cartItemId: number) {
    // console.log(cartItemId);
    this.updateQuantity(cartItemId, 1);
    this.messageService.add({ severity: 'success', summary: 'Th√†nh c√¥ng', detail: 'TƒÉng s·ªë l∆∞·ª£ng th√†nh c√¥ng' });
    // TƒÉng s·ªë l∆∞·ª£ng l√™n 1
  }

  // Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (kh√¥ng gi·∫£m d∆∞·ªõi 1)
  decreaseQuantity(cartItemId: number) {
    // console.log(cartItemId);
    const item = this.cartItems.find(cartItem => cartItem.id === cartItemId);
    if (item && item.quantity > 1) {
      this.updateQuantity(cartItemId, -1);
      this.messageService.add({ severity: 'success', summary: 'Th√†nh c√¥ng', detail: 'Gi·∫£m s·ªë l∆∞·ª£ng th√†nh c√¥ng' });
      // Gi·∫£m s·ªë l∆∞·ª£ng ƒëi 1
    } else {
      this.deleteCartItem(cartItemId);
      // N·∫øu s·ªë l∆∞·ª£ng = 1, x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    }
  }

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
  updateQuantity(cartItemId: number, change: number) {
    const item = this.cartItems.find(cartItem => cartItem.id === cartItemId);
    if (!item) return;

    const newQuantity = item.quantity + change;
    if (newQuantity < 1) {
      this.deleteCartItem(cartItemId);
      return;
    }

    const payload = {
      cartItemId: cartItemId,
      quantity: newQuantity
    };

    this.http.put(environment.backendApiUrl + '/api/v1/project/cartItem/update', payload, { headers: this.header })
      .subscribe(
        (response: any) => {
          if (response.resultCode === 0) {
            item.quantity = newQuantity;
            item.totalPrice = item.quantity * item.price; // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn c·ªßa s·∫£n ph·∫©m

            // üöÄ Quan tr·ªçng: T·∫°o b·∫£n sao m·ªõi ƒë·ªÉ Angular c·∫≠p nh·∫≠t giao di·ªán
            this.cartItems = [...this.cartItems];
            this.calculateTotalAmount();
            this.loadCart();

            console.log(this.cartItems);
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng' });
        }
      );
  }

  // X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  deleteCartItem(cartItemId: number) {
    this.http.delete(environment.backendApiUrl + `/api/v1/project/cartItem/delete?cartItemId=${cartItemId}`, { headers: this.header })
      .subscribe(
        (response: any) => {
          if (response.resultCode === 0) {
            this.cartItems = this.cartItems.filter(cartItem => cartItem.id !== cartItemId);
            this.messageService.add({ severity: 'success', summary: 'Th√†nh c√¥ng', detail: 'X√≥a m√≥n ƒÉn th√†nh c√¥ng' });

            this.calculateTotalAmount();
            this.loadCart();

            console.log(this.cartItems);
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi x√≥a s·∫£n ph·∫©m:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m' });
        }
      );
  }

  // T√≠nh t·ªïng gi√° tr·ªã ƒë∆°n h√†ng
  calculateTotalAmount() {
    this.totalAmount = this.cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  }

  // ƒê·∫∑t h√†ng
  placeOrder() {
    const accountId = this.authService.getAccountid();
    const cartId = this.authService.getCartid();

    console.log("Account ID:", accountId);
    console.log("Cart ID:", cartId);

    if (!accountId || !cartId) {
      console.error("L·ªói: Account ID ho·∫∑c Cart ID kh√¥ng h·ª£p l·ªá!");
      this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng do thi·∫øu th√¥ng tin' });
      return;
    }

    const payload = { 'account_id': accountId, 'cart_id': cartId };

    this.http.post(environment.backendApiUrl + '/api/v1/project/order/create', payload, {
      headers: this.header
    })
      .subscribe(
        (response: any) => {
          console.log('API Response:', response);
          if (response.resultCode === 0) {
            this.messageService.add({ severity: 'success', summary: 'Th√†nh c√¥ng', detail: 'ƒê·∫∑t h√†ng th√†nh c√¥ng!' });
            this.cartItems = [];
          } else {
            this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: response.message });
          }
        },
        (error) => {
          console.error('L·ªói khi ƒë·∫∑t h√†ng:', error);
          this.messageService.add({ severity: 'error', summary: 'L·ªói', detail: 'Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng' });
        }
      );
  }
}
